generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum report_status {
  SEEN
  UNSEEN
  REMOVED
  SETTLED
}

model courses {
  courseCode        String              @id(map: "pk_course_code") @map("course_code")
  archived          Boolean
  attributes        String[]
  calendar          String
  campus            String
  description       String
  enrolmentRules    String              @map("enrolment_rules")
  equivalents       String[]
  exclusions        String[]
  faculty           String
  fieldOfEducation  String              @map("field_of_education")
  genEd             Boolean             @map("gen_ed")
  level             Int
  school            String
  studyLevel        String              @map("study_level")
  terms             Int[]
  title             String
  uoc               Int
  rating            Float
  reviews           reviews[]
  reviewsScraped    reviewsScraped[]
}

model reports {
  reportId         String        @id(map: "pk_report_id") @default(dbgenerated("gen_random_uuid()")) @map("report_id") @db.Uuid
  reviewId         String        @map("review_id") @db.Uuid
  zid              String
  status           report_status
  reason           String
  createdTimestamp DateTime      @default(now()) @map("created_timestamp") @db.Timestamp(6)
  updatedTimestamp DateTime      @default(now()) @map("updated_timestamp") @db.Timestamp(6)
  reviews          reviews       @relation(fields: [reviewId], references: [reviewId], onDelete: NoAction, onUpdate: NoAction, map: "fk_review_id")
  users            users         @relation(fields: [zid], references: [zid], onDelete: NoAction, onUpdate: NoAction, map: "fk_zid")
}

model reviews {
  reviewId         String    @id(map: "pk_review_id") @default(dbgenerated("gen_random_uuid()")) @map("review_id") @db.Uuid
  zid              String
  courseCode       String    @map("course_code")
  authorName       String    @map("author_name")
  title            String
  description      String?
  grade            Int?
  termTaken        String    @map("term_taken")
  createdTimestamp DateTime  @default(now()) @map("created_timestamp") @db.Timestamp(6)
  updatedTimestamp DateTime  @default(now()) @map("updated_timestamp") @db.Timestamp(6)
  upvotes          String[]
  manageability    Float
  usefulness       Float
  enjoyability     Float
  overallRating    Float     @map("overall_rating")
  reports          reports[]
  courses          courses   @relation(fields: [courseCode], references: [courseCode], onDelete: NoAction, onUpdate: NoAction, map: "fk_course_code")
  users            users     @relation(fields: [zid], references: [zid], onDelete: NoAction, onUpdate: NoAction, map: "fk_zid")
}

model reviewsScraped {
  reviewId         String   @id(map: "pk_review_scraped_id") @default(dbgenerated("gen_random_uuid()")) @map("review_scraped_id") @db.Uuid
  source           String
  sourceId         Int      @map("source_id")
  courseCode       String   @map("course_code")
  authorName       String   @map("author_name")
  title            String
  description      String?
  termTaken        String   @map("term_taken")
  createdTimestamp DateTime @default(now()) @map("created_timestamp") @db.Timestamp(6)
  upvotes          String[]
  overallRating    Float    @map("overall_rating")
  courses          courses  @relation(fields: [courseCode], references: [courseCode], onDelete: NoAction, onUpdate: NoAction, map: "fk_course_code")

  @@map("reviews_scraped")
}

model users {
  zid               String    @id(map: "pk_zid")
  bookmarkedReviews String[]  @map("bookmarked_reviews")
  bookmarkedCourses String[]  @map("bookmarked_courses")
  isAdmin           Boolean   @map("is_admin")
  reports           reports[]
  reviews           reviews[]
}
